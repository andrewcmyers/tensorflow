
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package org.tensorflow.shapechecker;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java.io.StringReader;

/** CUP v0.11b 20150326 generated parser.
  */
public class ShapeParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return Syms.class;
  }

  /** Default constructor. */
  @Deprecated
  public ShapeParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ShapeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public ShapeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\010\004\007\006\004\007\010\001\002\000" +
    "\006\002\ufffa\005\ufffa\001\002\000\004\002\015\001\002" +
    "\000\004\002\000\001\002\000\006\002\ufffb\005\ufffb\001" +
    "\002\000\004\002\ufffe\001\002\000\006\002\ufffc\005\ufffc" +
    "\001\002\000\006\002\uffff\005\013\001\002\000\006\004" +
    "\007\006\004\001\002\000\006\002\ufffd\005\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\012\002\004\003\005\004\011\005\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\013\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ShapeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$ShapeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ShapeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return l.nextToken(); 
    }


  Lexer l;
  Dimensions output;

  public ShapeParser(Lexer l) {
    this.l = l;
  }

    static Dimensions parseDimensions(String s) {
        //System.err.println("XXX making dimensions from " + s);
        StringReader ss = new StringReader(s);
        ShapeParser p = new ShapeParser(new Lexer(ss));
        Symbol sy = null;
        try {
            sy = p.parse();
        } catch (Exception e) {
            throw new Error("parse failed: " + e.getMessage());
        }
        //System.err.println("Dimensions parsed: " + p.output);
        return p.output;

    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ShapeParser$actions {
    private final ShapeParser parser;

    /** Constructor */
    CUP$ShapeParser$actions(ShapeParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 7. */
    public final java_cup.runtime.Symbol CUP$ShapeParser$do_action_part00000000(
            int                        CUP$ShapeParser$act_num,
            java_cup.runtime.lr_parser CUP$ShapeParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$ShapeParser$stack,
            int                        CUP$ShapeParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$ShapeParser$result;

        /* select the action based on the action number */
        switch (CUP$ShapeParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= goal EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$ShapeParser$stack.elementAt(CUP$ShapeParser$top-1).left;
                int start_valright = CUP$ShapeParser$stack.elementAt(CUP$ShapeParser$top-1).right;
                Dimensions start_val = CUP$ShapeParser$stack.elementAt(CUP$ShapeParser$top-1).<Dimensions> value();
                RESULT = start_val;
                CUP$ShapeParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$ShapeParser$stack.elementAt(CUP$ShapeParser$top-1), CUP$ShapeParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$ShapeParser$parser.done_parsing();
            return CUP$ShapeParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // goal ::= shape 
            {
                Dimensions RESULT = null;
                int sleft = CUP$ShapeParser$stack.peek().left;
                int sright = CUP$ShapeParser$stack.peek().right;
                Dimensions s = CUP$ShapeParser$stack.peek().<Dimensions> value();
                 RESULT = output = s; 
                CUP$ShapeParser$result = parser.getSymbolFactory().newSymbol("goal",0, CUP$ShapeParser$stack.peek(), CUP$ShapeParser$stack.peek(), RESULT);
            }
            return CUP$ShapeParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // shape ::= dimensions 
            {
                Dimensions RESULT = null;
                int ddleft = CUP$ShapeParser$stack.peek().left;
                int ddright = CUP$ShapeParser$stack.peek().right;
                List<DimOrId> dd = CUP$ShapeParser$stack.peek().<List<DimOrId>> value();
                 RESULT = new Dimensions(dd); 
                CUP$ShapeParser$result = parser.getSymbolFactory().newSymbol("shape",1, CUP$ShapeParser$stack.peek(), CUP$ShapeParser$stack.peek(), RESULT);
            }
            return CUP$ShapeParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // shape ::= SCALAR 
            {
                Dimensions RESULT = null;
                 RESULT = new Dimensions(); 
                CUP$ShapeParser$result = parser.getSymbolFactory().newSymbol("shape",1, CUP$ShapeParser$stack.peek(), CUP$ShapeParser$stack.peek(), RESULT);
            }
            return CUP$ShapeParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // dimensions ::= dimensions COMMA dimension 
            {
                List<DimOrId> RESULT = null;
                int ddleft = CUP$ShapeParser$stack.elementAt(CUP$ShapeParser$top-2).left;
                int ddright = CUP$ShapeParser$stack.elementAt(CUP$ShapeParser$top-2).right;
                List<DimOrId> dd = CUP$ShapeParser$stack.elementAt(CUP$ShapeParser$top-2).<List<DimOrId>> value();
                int dleft = CUP$ShapeParser$stack.peek().left;
                int dright = CUP$ShapeParser$stack.peek().right;
                DimOrId d = CUP$ShapeParser$stack.peek().<DimOrId> value();
                 RESULT = dd; dd.add(d); 
                CUP$ShapeParser$result = parser.getSymbolFactory().newSymbol("dimensions",2, CUP$ShapeParser$stack.elementAt(CUP$ShapeParser$top-2), CUP$ShapeParser$stack.peek(), RESULT);
            }
            return CUP$ShapeParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // dimensions ::= dimension 
            {
                List<DimOrId> RESULT = null;
                int dleft = CUP$ShapeParser$stack.peek().left;
                int dright = CUP$ShapeParser$stack.peek().right;
                DimOrId d = CUP$ShapeParser$stack.peek().<DimOrId> value();
                 RESULT = new ArrayList<DimOrId>(); RESULT.add(d); 
                CUP$ShapeParser$result = parser.getSymbolFactory().newSymbol("dimensions",2, CUP$ShapeParser$stack.peek(), CUP$ShapeParser$stack.peek(), RESULT);
            }
            return CUP$ShapeParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // dimension ::= ID 
            {
                DimOrId RESULT = null;
                int idleft = CUP$ShapeParser$stack.peek().left;
                int idright = CUP$ShapeParser$stack.peek().right;
                DimOrId id = CUP$ShapeParser$stack.peek().<DimOrId> value();
                 RESULT = id; 
                CUP$ShapeParser$result = parser.getSymbolFactory().newSymbol("dimension",3, CUP$ShapeParser$stack.peek(), CUP$ShapeParser$stack.peek(), RESULT);
            }
            return CUP$ShapeParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // dimension ::= NUMBER 
            {
                DimOrId RESULT = null;
                int nleft = CUP$ShapeParser$stack.peek().left;
                int nright = CUP$ShapeParser$stack.peek().right;
                DimOrId n = CUP$ShapeParser$stack.peek().<DimOrId> value();
                 RESULT = n; 
                CUP$ShapeParser$result = parser.getSymbolFactory().newSymbol("dimension",3, CUP$ShapeParser$stack.peek(), CUP$ShapeParser$stack.peek(), RESULT);
            }
            return CUP$ShapeParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$ShapeParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$ShapeParser$do_action(
            int                        CUP$ShapeParser$act_num,
            java_cup.runtime.lr_parser CUP$ShapeParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$ShapeParser$stack,
            int                        CUP$ShapeParser$top)
            throws java.lang.Exception {
            return CUP$ShapeParser$do_action_part00000000(
                           CUP$ShapeParser$act_num,
                           CUP$ShapeParser$parser,
                           CUP$ShapeParser$stack,
                           CUP$ShapeParser$top);
    }
}

}
